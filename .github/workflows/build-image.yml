name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: self-hosted

    steps:
      - uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        env:
          # this seems to be the only endpoint available for ECR?
          AWS_REGION: us-east-1

      - uses: actions/checkout@v3

      - run: |
          docker run --rm -v $(pwd):/workspace gcr.io/kaniko-project/executor:debug \
            --cache \
            --reproducible \
            --destination=public.ecr.aws/t4g8t3e5/huisheng:latest
        env:
          IMAGE: public.ecr.aws/t4g8t3e5/huisheng:latest
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}

      - env:
          AWS_REGION: us-east-1
          REPO_NAME: huisheng
        run: |
          # list images
          IMAGES=$( aws ecr-public describe-images --repository-name $REPO_NAME )
          # filter by untagged
          IMAGES_TO_REMOVE=$( echo $IMAGES | jq '.imageDetails | map(select(.imageTags | not)) | map({imageDigest: .imageDigest})' )
          SHOULD_DELETE=$(echo $IMAGES_TO_REMOVE | jq 'length > 0')
          [ $SHOULD_DELETE == "false" ] || exit 0
          # delete
          RESULT=$( aws ecr-public batch-delete-image --repository-name $REPO_NAME --image-ids $IMAGES_TO_REMOVE )
          # check for failures
          FAILED=$( echo $RESULT | '.failures | length > 0' )
          echo $RESULT
          [ $FAILED == "true" ] || exit 1
